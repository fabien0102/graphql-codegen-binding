// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`typescript generator 1`] = `
"const { Binding: BaseBinding } = require('graphql-binding')
const { GraphQLResolveInfo } = require('graphql')

module.exports.Binding = class Binding extends BaseBinding {

  constructor({ schema, fragmentReplacements }) {
    super({ schema, fragmentReplacements });

    var self = this
    this.query = {
      posts(args, info, context) { 
        return self.delegate('query', 'posts', args, info, context)
      },
      users(args, info, context) { 
        return self.delegate('query', 'users', args, info, context)
      },
      post(args, info, context) { 
        return self.delegate('query', 'post', args, info, context)
      },
      user(args, info, context) { 
        return self.delegate('query', 'user', args, info, context)
      },
      postsConnection(args, info, context) { 
        return self.delegate('query', 'postsConnection', args, info, context)
      },
      usersConnection(args, info, context) { 
        return self.delegate('query', 'usersConnection', args, info, context)
      },
      node(args, info, context) { 
        return self.delegate('query', 'node', args, info, context)
      }
    }
      
    this.mutation = {
      createPost(args, info, context) { 
        return self.delegate('mutation', 'createPost', args, info, context)
      },
      createUser(args, info, context) { 
        return self.delegate('mutation', 'createUser', args, info, context)
      },
      updatePost(args, info, context) { 
        return self.delegate('mutation', 'updatePost', args, info, context)
      },
      updateUser(args, info, context) { 
        return self.delegate('mutation', 'updateUser', args, info, context)
      },
      deletePost(args, info, context) { 
        return self.delegate('mutation', 'deletePost', args, info, context)
      },
      deleteUser(args, info, context) { 
        return self.delegate('mutation', 'deleteUser', args, info, context)
      },
      upsertPost(args, info, context) { 
        return self.delegate('mutation', 'upsertPost', args, info, context)
      },
      upsertUser(args, info, context) { 
        return self.delegate('mutation', 'upsertUser', args, info, context)
      },
      updateManyPosts(args, info, context) { 
        return self.delegate('mutation', 'updateManyPosts', args, info, context)
      },
      updateManyUsers(args, info, context) { 
        return self.delegate('mutation', 'updateManyUsers', args, info, context)
      },
      deleteManyPosts(args, info, context) { 
        return self.delegate('mutation', 'deleteManyPosts', args, info, context)
      },
      deleteManyUsers(args, info, context) { 
        return self.delegate('mutation', 'deleteManyUsers', args, info, context)
      }
    }
      
    this.subscription = {
      post(args, infoOrQuery, context) { 
        return self.delegateSubscription('post', args, infoOrQuery, context)
      },
      user(args, infoOrQuery, context) { 
        return self.delegateSubscription('user', args, infoOrQuery, context)
      }
    }
  }

  delegate(operation, field, args, info, context) {
    return super.delegate(operation, field, args, info, context)
  }

  delegateSubscription(field, args, infoOrQuery, context) {
    return super.delegateSubscription(field, args, infoOrQuery, context)
  }
}"
`;
